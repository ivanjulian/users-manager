{"version":3,"sources":["redux/reducers/getUsersReducer.js","redux/rootReducer.js","redux/types.js","redux/actions/getActions.js","redux/sagas/getUsersSaga.js","redux/actions/postActions.js","redux/sagas/postUsersSaga.js","redux/actions/deleteActions.js","redux/sagas/deleteUserSaga.js","redux/actions/putActions.js","redux/sagas/putUserSaga.js","redux/sagas/rootSagas.js","redux/store.js","components/InputForm/form.js","components/InputForm/index.js","components/UserCard.js","components/EditUserCardForm.js","components/EditUserCard.js","components/PaginationPages.js","components/Paginator.js","components/UsersComponent.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","users","error","rootReducer","combineReducers","state","action","type","payload","getUsersSuccess","getUsersFailure","getUsers","watchGetUsers","fetchData","a","Axios","get","response","data","call","put","takeEvery","postUser","watchPostUser","postData","newUser","headers","jsonNewUser","JSON","stringify","post","update","deleteUser","watchDeleteUser","apiDeleteUser","userID","delete","putUser","watchPutUser","apiPutUser","editedUser","id","rootSagas","all","fork","saga","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","logger","run","Form","props","dispatch","useDispatch","errors","touched","handleChange","isValid","setFieldTouched","formStateInitialValues","name","surname","desc","useState","formState","setFormState","change","event","persist","target","value","handleSubmit","onSubmit","preventDefault","TextField","label","fullWidth","margin","helperText","Boolean","onChange","bind","surename","multiline","rowsMax","variant","Button","disabled","color","validationSchema","Yup","required","max","InputForm","initialValues","Paper","className","elevation","Typography","align","UserCard","user","editUser","Card","CardContent","component","CardActions","size","onClick","EditUserCardForm","console","log","defaultValue","EditUserCard","loadUsers","PaginationPages","pageNumbers","paginate","currentPage","Pagination","count","page","Paginator","editMode","usersPerPage","currentUsers","paginatorInfo","setPaginatorInfo","indexOfLastUser","indexOfFirstUser","useEffect","numberOfPages","Math","ceil","length","someUsers","slice","allState","calcPaginationInfo","List","map","isEdit","idUserToEdit","ListItem","key","UsersComponent","useSelector","setEditMode","setEditedUser","putUserRequest","deleteUserRequest","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b1be015c.chunk.js","sourcesContent":["import {\n  GET_USERS_REQUEST,\n  GET_USERS_SUCCESS,\n  GET_USERS_FAILURE\n} from '../types'\n\nconst initialState = {\n  loading: false,\n  users: [],\n  error: ''\n}\n\nexport const getUsersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_USERS_REQUEST:\n      return {\n        ...state,\n        loading: true\n      }\n\n    case GET_USERS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        users: action.payload,\n        error: ''\n      }\n    case GET_USERS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      }\n    default: return state\n  }\n}","import { combineReducers } from \"redux\";\nimport { getUsersReducer } from \"./reducers/getUsersReducer\";\n\nexport const rootReducer = combineReducers(\n  {\n    users: getUsersReducer\n  }\n)","//GETTING USERS FROM API\nexport const GET_USERS_REQUEST = 'GET_USERS_REQUEST';\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';\nexport const GET_USERS_FAILURE = 'GET_USERS_FAILURE';\n\n//POST(ADD) USER TO API\nexport const POST_USER_REQUEST = 'POST_USER_REQUEST';\nexport const POST_USER_SUCCESS = 'POST_USER_SUCCESS';\nexport const POST_USER_FAILURE = 'POST_USER_FAILURE';\n\n//PUT(CHANGE) USER FROM API\nexport const PUT_USER_REQUEST = 'PUT_USER_REQUEST';\nexport const PUT_USER_SUCCESS = 'PUT_USER_SUCCESS';\nexport const PUT_USER_FAILURE = 'PUT_USER_FAILURE';\n\n//DELETE USER FROM API\nexport const DELETE_USER_REQUEST = 'DELETE_USER_REQUEST';\nexport const DELETE_USER_SUCCESS = 'DELETE_USER_SUCCESS';\nexport const DELETE_USER_FAILURE = 'DELETE_USER_FAILURE';","import {\n  GET_USERS_REQUEST,\n  GET_USERS_SUCCESS,\n  GET_USERS_FAILURE\n} from '../types'\n\nexport const getUsersRequest = () => {\n  return{\n    type: GET_USERS_REQUEST\n  }\n}\n\nexport const getUsersSuccess = (users) => {\n  return{\n    type: GET_USERS_SUCCESS,\n    payload: users\n  }\n}\n\nexport const getUsersFailure = (error) => {\n  return{\n    type: GET_USERS_FAILURE,\n    payload: error\n  }\n}","import { takeEvery, put, call } from 'redux-saga/effects'\nimport Axios from 'axios'\n\nimport { GET_USERS_REQUEST } from '../types'\nimport { getUsersSuccess, getUsersFailure } from '../actions/getActions'\n\nexport const fetchData = async () => {\n  const response = await Axios.get('http://77.120.241.80:8911/api/users')\n  return await response.data\n}\n\nfunction* getUsers() {\n  try {\n    const payload = yield call(fetchData)\n    yield put(getUsersSuccess(payload))\n  } catch (error) {\n    yield put(getUsersFailure(error))\n  }\n\n}\n\nexport function* watchGetUsers() {\n  yield takeEvery(GET_USERS_REQUEST, getUsers)\n}","import {\n  POST_USER_REQUEST,\n  POST_USER_SUCCESS,\n  POST_USER_FAILURE\n} from '../types'\n\nexport const postUserRequest = (newUser) => {\n  return {\n    type: POST_USER_REQUEST,\n    payload: newUser\n  }\n}\n\nexport const postUserSuccess = (users) => {\n  return {\n    type: POST_USER_SUCCESS,\n    payload: users\n  }\n}\n\nexport const postUserFailure = (error) => {\n  return {\n    type: POST_USER_FAILURE,\n    payload: error\n  }\n}","import { takeEvery, put, call } from 'redux-saga/effects'\nimport Axios from 'axios'\n\nimport { POST_USER_REQUEST } from '../types'\nimport { postUserSuccess, postUserFailure } from '../actions/postActions'\nimport { getUsersSuccess, getUsersFailure } from '../actions/getActions'\nimport { fetchData } from './getUsersSaga'\n\nconst postData = async (newUser) => {\n\n  const headers = {\n    'Content-Type': 'application/json'\n  }\n  const jsonNewUser = JSON.stringify(newUser.payload)\n  const response = await Axios.post('http://77.120.241.80:8911/api/users', jsonNewUser, {\n    headers\n  })\n\n  return response\n}\n\nfunction* postUser(newUser) {\n  try {\n    const payload = yield call(postData, newUser)\n    yield put(postUserSuccess(payload))\n    const update = yield call(fetchData) // updating users after post user\n    yield put(getUsersSuccess(update))   \n  } catch (error) {\n    yield put(postUserFailure(error))\n    yield put(getUsersFailure(error))\n  }\n\n}\n\nexport function* watchPostUser() {\n  yield takeEvery(POST_USER_REQUEST, postUser)\n}","import {\n  DELETE_USER_REQUEST,\n  DELETE_USER_SUCCESS,\n  DELETE_USER_FAILURE\n} from '../types'\n\nexport const deleteUserRequest = (id) => {\n  return{\n    type: DELETE_USER_REQUEST,\n    payload: id\n  }\n}\n\nexport const deleteUserSuccess = (users) => {\n  return{\n    type: DELETE_USER_SUCCESS,\n    payload: users\n  }\n}\n\nexport const deleteUserFailure = (error) => {\n  return{\n    type: DELETE_USER_FAILURE,\n    payload: error\n  }\n}","import { takeEvery, put, call } from 'redux-saga/effects'\nimport Axios from 'axios'\n\nimport { DELETE_USER_REQUEST, } from '../types'\nimport { deleteUserSuccess, deleteUserFailure } from '../actions/deleteActions'\nimport { getUsersSuccess, getUsersFailure } from '../actions/getActions'\nimport { fetchData } from './getUsersSaga'\n\nconst apiDeleteUser = async (action) => {\n\n  const headers = {\n    'Content-Type': 'application/json'\n  }\n  const userID = action.payload;\n  const response = await Axios.delete(`http://77.120.241.80:8911/api/user/${userID}`, userID, {\n    headers\n  })\n\n  return response\n}\n\nfunction* deleteUser(action) {\n  try {\n    const payload = yield call(apiDeleteUser, action)\n    yield put(deleteUserSuccess(payload))\n    const update = yield call(fetchData) // updating users after deleting user\n    yield put(getUsersSuccess(update))   \n  } catch (error) {\n    yield put(deleteUserFailure(error))\n    yield put(getUsersFailure(error))\n  }\n\n}\n\nexport function* watchDeleteUser() {\n  yield takeEvery(DELETE_USER_REQUEST, deleteUser)\n}","import {\n  PUT_USER_REQUEST,\n  PUT_USER_SUCCESS,\n  PUT_USER_FAILURE\n} from '../types'\n\nexport const putUserRequest = (editedUser) => {\n  return{\n    type: PUT_USER_REQUEST,\n    payload: editedUser\n  }\n}\n\nexport const putUserSuccess = (user) => {\n  return{\n    type: PUT_USER_SUCCESS,\n    payload: user\n  }\n}\n\nexport const putUserFailure = (error) => {\n  return{\n    type: PUT_USER_FAILURE,\n    payload: error\n  }\n}","import { takeEvery, put, call } from 'redux-saga/effects'\nimport Axios from 'axios'\n\nimport { PUT_USER_REQUEST } from '../types'\nimport { putUserSuccess, putUserFailure } from '../actions/putActions'\nimport { getUsersSuccess, getUsersFailure } from '../actions/getActions'\nimport { fetchData } from './getUsersSaga'\n\nconst apiPutUser = async (action) => {\n\n  const headers = {\n    'Content-Type': 'application/json'\n  }\n  const editedUser = JSON.stringify(action.payload);\n  const response = await Axios.put(`http://77.120.241.80:8911/api/user/${action.payload.id}`, editedUser, {\n    headers\n  })\n\n  return response\n}\n\nfunction* putUser(action) {\n  try {\n    const payload = yield call(apiPutUser, action)\n    yield put(putUserSuccess(payload))\n    const update = yield call(fetchData) // updating users after put user\n    yield put(getUsersSuccess(update))   \n  } catch (error) {\n    yield put(putUserFailure(error))\n    yield put(getUsersFailure(error))\n  }\n\n}\n\nexport function* watchPutUser() {\n  yield takeEvery(PUT_USER_REQUEST, putUser)\n}","import {watchGetUsers} from './getUsersSaga'\nimport {watchPostUser} from './postUsersSaga'\nimport {watchDeleteUser} from './deleteUserSaga'\nimport {watchPutUser} from './putUserSaga'\nimport { all, fork } from 'redux-saga/effects'\n\nexport function* rootSagas(){\n  yield all([fork(watchGetUsers)]);\n  yield all([fork(watchPostUser)]);\n  yield all([fork(watchDeleteUser)]);\n  yield all([fork(watchPutUser)]);\n}","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport logger from 'redux-logger'\n\nimport {rootReducer} from './rootReducer'\nimport {rootSagas} from './sagas/rootSagas'\nconst saga = createSagaMiddleware();\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(\n      saga,\n      logger\n    )\n  )\n)\n\nsaga.run(rootSagas)","import React, {useState} from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport { postUserRequest } from '../../redux/actions/postActions'\nimport { useDispatch } from 'react-redux'\n\n\nexport const Form = (props) => {\n  const dispatch = useDispatch()\n  const {\n    errors,\n    touched,\n    handleChange,\n    isValid,\n    setFieldTouched,\n  } = props;\n  const formStateInitialValues = {\n    name: '',\n    surname: '',\n    desc: ''\n  }\n  const [formState, setFormState] = useState(formStateInitialValues);\n\n  const change = (name, event) => {\n    event.persist();\n    handleChange(event);\n    setFieldTouched(name, true, false);\n    setFormState({...formState, [event.target.name]: event.target.value});\n  };\n\n  const handleSubmit = async() => {\n    await dispatch(postUserRequest(formState));\n    setFormState(formStateInitialValues);\n  }\n  return (\n    <form onSubmit={(event) => {\n      event.preventDefault();\n      handleSubmit();\n    }}>\n      <TextField\n        id=\"name\"\n        name=\"name\"\n        label=\"Name\"\n        fullWidth\n        margin='dense'\n        helperText={touched.name ? errors.name : \"\"}\n        error={touched.name && Boolean(errors.name)}\n        value={formState.name}\n        onChange={change.bind(null, \"name\")}\n      />\n\n      <TextField\n        id=\"surname\"\n        name=\"surname\"\n        label=\"Surname\"\n        fullWidth\n        margin='dense'\n        helperText={touched.surename ? errors.surename : \"\"}\n        error={touched.surename && Boolean(errors.surename)}\n        value={formState.surname}\n        onChange={change.bind(null, \"surname\")}\n      />\n\n      <TextField\n        id=\"desc\"\n        name=\"desc\"\n        label=\"Desc\"\n        multiline //for textarea\n        rowsMax={4}\n        variant=\"outlined\"\n        fullWidth\n        margin='dense'\n        helperText={touched.desc ? errors.desc : \"\"}\n        error={touched.desc && Boolean(errors.desc)}\n        value={formState.desc}\n        onChange={change.bind(null, \"desc\")}\n      />\n\n      <Button\n        type=\"submit\"\n        fullWidth\n        variant=\"contained\"\n        disabled={!isValid}\n        color=\"primary\"\n        margin='dense'\n      >\n        Submit\n      </Button>\n    </form>\n  )\n}\n","import React, {useState} from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport { Paper } from '@material-ui/core'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\nimport { Form } from './form'\nimport './form.css'\n\nexport const validationSchema = Yup.object({\n  name: Yup.string('Enter your name').required('Name is required').max(15, 'Too much symbols, 15 allowed'),\n  surname: Yup.string('Enter your surename').required('Surename is required').max(15, 'Too much symbols, 15 allowed'),\n  desc: Yup.string('Enter description').required('Description is required').max(180, 'Too much symbols, 180 allowed'),\n})\n\nfunction InputForm() {\n  const [initialValues, setInitialValues] = useState({\n    id: 0,\n    name: \"\",\n    surname: \"\",\n    desc: \"\"\n  })\n  return (\n    <>\n      <Paper className=\"input-form-paper\" elevation={3}>\n        <Typography variant=\"h4\" color=\"primary\" align=\"center\">Add User</Typography>\n        <Formik initialValues={initialValues}\n          validationSchema={validationSchema}>\n          {props => <Form {...props}/>}\n        </Formik>\n      </Paper>\n    </>\n  )\n}\n\nexport default InputForm\n","import React from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardActions from '@material-ui/core/CardActions'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport './UserCard.css'\n\nexport function UserCard(props) {\n  const { user, deleteUser, editUser } = props;\n\n  const handleDelete = () => {\n     deleteUser(user.id);\n  }\n\n  return (\n    <Card className=\"user-card\">\n      <CardContent className=\"user-card-content\">\n        <Typography variant=\"body2\" component=\"p\">\n          Name: {user.name}\n        </Typography>\n\n        <Typography variant=\"body2\" component=\"p\">\n          Surname: {user.surname}\n        </Typography>\n\n        <Typography variant=\"body2\" component=\"p\">\n          Description: {user.desc}\n        </Typography>\n      </CardContent>\n      <CardActions className=\"user-card-actions\">\n        <Button\n          size=\"small\"\n          variant=\"contained\"\n          color=\"primary\"\n          margin='dense'\n          onClick={async () => {\n            await handleDelete()\n          }}\n        >\n          Delete\n        </Button>\n        <Button\n          size=\"small\"\n          variant=\"contained\"\n          color=\"primary\"\n          margin='dense'\n          onClick={() => editUser(user)}\n        >\n          Edit\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}","import React, {useState} from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardActions from '@material-ui/core/CardActions'\nimport './EditUserCard.css'\n\nexport const EditUserCardForm = (props) => {\n  const {\n    errors,\n    touched,\n    handleChange,\n    isValid,\n    setFieldTouched,\n    putUser,\n    editUser,\n    user\n  } = props;\n\n  const [formState, setFormState] = useState({\n    id: user.id,\n    name: user.name,\n    surname: user.surname,\n    desc: user.desc\n  });\n\n  const change = (name, event) => {\n    event.persist();\n    handleChange(event);\n    setFieldTouched(name, true, false);\n    setFormState({ ...formState, [event.target.name]: event.target.value })\n    console.log(formState);\n  };\n\n  const handleSubmit = () => {\n    editUser(user);\n    putUser(formState);\n  }\n  return (\n    <form onSubmit={(event) => {\n      event.preventDefault();\n      handleSubmit()\n    }}>\n      <CardContent>\n        <TextField\n          id=\"name\"\n          name=\"name\"\n          label=\"Name\"\n          fullWidth\n          margin='dense'\n          variant=\"outlined\"\n          size=\"small\"\n          helperText={touched.name ? errors.name : \"\"}\n          error={touched.name && Boolean(errors.name)}\n          defaultValue={formState.name}\n          onChange={change.bind(null, \"name\")}\n        />\n\n        <TextField\n          id=\"surname\"\n          name=\"surname\"\n          label=\"Surname\"\n          fullWidth\n          margin='dense'\n          variant=\"outlined\"\n          size=\"small\"\n          helperText={touched.surename ? errors.surename : \"\"}\n          error={touched.surename && Boolean(errors.surename)}\n          defaultValue={formState.surname}\n          onChange={change.bind(null, \"surname\")}\n        />\n\n        <TextField\n          id=\"desc\"\n          name=\"desc\"\n          label=\"Desc\"\n          multiline //for textarea\n          rowsMax={4}\n          variant=\"outlined\"\n          size=\"small\"\n          fullWidth\n          margin='dense'\n          helperText={touched.desc ? errors.desc : \"\"}\n          error={touched.desc && Boolean(errors.desc)}\n          defaultValue={formState.desc}\n          onChange={change.bind(null, \"desc\")}\n        />\n      </CardContent>\n      <CardActions className=\"edit-card-actions\">\n        <Button\n          type=\"submit\"\n          disabled={!isValid}\n          size=\"small\"\n          variant=\"contained\"\n          color=\"primary\"\n          margin='dense'\n        >\n          Save\n      </Button>\n        <Button\n          size=\"small\"\n          variant=\"contained\"\n          color=\"primary\"\n          margin='dense'\n          \n          onClick={() => editUser(user)}\n        >\n          Cancel\n      </Button>\n      </CardActions>\n    </form>\n  )\n}\n","import React, {useState} from 'react'\nimport { Formik } from 'formik'\nimport { Card, Typography } from '@material-ui/core'\n\nimport {validationSchema} from './InputForm'\nimport {EditUserCardForm} from './EditUserCardForm'\n\nexport function EditUserCard(props) {\n  const {putUser, editUser, user, loadUsers} = props;\n  const [initialValues, setInitialValues] = useState({\n    id: user.id,\n    name: user.name,\n    surname: user.surname,\n    desc: user.desc\n  })\n  return (\n    <>\n      <Card className=\"input-form-paper\">\n      <Typography color=\"primary\" align=\"center\">Edit User</Typography>\n        <Formik initialValues={initialValues}\n          validationSchema={validationSchema}>\n          {props => <EditUserCardForm loadUsers={loadUsers} putUser={putUser} editUser={editUser} user={user} {...props}/>}\n        </Formik>\n      </Card>\n    </>\n\n  )\n}\n\n","import React from 'react';\nimport Pagination from '@material-ui/lab/Pagination';\n\nexport const PaginationPages = (props) => {\n  const { pageNumbers, paginate, currentPage } = props;\n\n  const handleChange = (event, value) => {\n    paginate(value)\n  }\n  return (\n    <>\n      <Pagination count={pageNumbers} page={currentPage} onChange={handleChange} />\n    </>\n  )\n}","import React, {useEffect, useState} from 'react'\nimport { List, ListItem } from '@material-ui/core';\n\nimport { UserCard } from './UserCard'\nimport { EditUserCard } from './EditUserCard';\nimport { PaginationPages } from './PaginationPages'\n\nexport const Paginator = (props) => {\n  const {\n    users,\n    editMode,\n    putUser,\n    loadUsers,\n    editUser,\n    deleteUser,\n  } = props;\n\n\n  const [paginatorInfo, setPaginatorInfo] = useState({\n    currentPage: 1,  //current opened page \n    usersPerPage: 5,//number of users on the page\n    currentUsers: [],//users on the page\n    pageNumbers: []  //ul with pages number for navigation\n  })\n  const {\n    currentPage,\n    usersPerPage,\n    currentUsers,\n    pageNumbers } = paginatorInfo;\n\n  const indexOfLastUser = currentPage * usersPerPage;\n  const indexOfFirstUser = indexOfLastUser - usersPerPage;\n\n  const paginate = (page) => {\n    const indexOfLastUser = page * usersPerPage;\n    const indexOfFirstUser = indexOfLastUser - usersPerPage;\n    const someUsers = users.users.slice(indexOfFirstUser, indexOfLastUser);\n    setPaginatorInfo(allState => {\n      return {\n        ...allState,\n        currentPage: page,\n        currentUsers: someUsers\n      }\n    });\n  }\n\n  const calcPaginationInfo = () => {\n    //let pageNumbersArray = [];\n    let numberOfPages = Math.ceil(users.users.length / usersPerPage);\n    const someUsers = users.users.slice(indexOfFirstUser, indexOfLastUser);\n\n    // for (let i = 1; i <= Math.ceil(users.users.length / usersPerPage); i++) {\n    //   pageNumbersArray.push(i);\n    // }\n\n    setPaginatorInfo(allState => {\n      return {\n        ...allState,\n        currentUsers: someUsers,\n        pageNumbers: numberOfPages\n      }\n    })\n\n    console.log(paginatorInfo);\n  }\n\n  useEffect(() => {\n    calcPaginationInfo();\n  }, [users])\n\n  return (\n    <>\n      <PaginationPages currentPage={currentPage} pageNumbers={pageNumbers} paginate={paginate} />\n      <List>\n        {\n          currentUsers.map(user => {\n            if (editMode.isEdit && user.id === editMode.idUserToEdit) {\n              return (\n                <ListItem className=\"user-li\" key={user.id}>\n                  <EditUserCard putUser={putUser} loadUsers={loadUsers} editUser={editUser} user={user} />\n                </ListItem>)\n            } else {\n              return (\n                <ListItem className=\"user-li\" key={user.id}>\n                  <UserCard deleteUser={deleteUser} loadUsers={loadUsers} editUser={editUser} user={user} />\n                </ListItem>)\n            }\n          })\n        }\n      </List>\n\n    </>\n  )\n}","import React, {useEffect, useState} from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getUsersRequest } from '../redux/actions/getActions'\nimport { deleteUserRequest } from '../redux/actions/deleteActions'\nimport { putUserRequest } from '../redux/actions/putActions';\n\nimport { Paginator } from './Paginator.js'\n\nconst UsersComponent = () => {\n\n  const users = useSelector(state => state.users);\n  const dispatch = useDispatch();\n  const loadUsers = () => dispatch(getUsersRequest());\n  const deleteUser = (id) => dispatch(deleteUserRequest(id));\n  const putUser = (user) => dispatch(putUserRequest(user));\n\n  useEffect(() => {\n    loadUsers();\n  }, [])\n\n  const [editMode, setEditMode] = useState({\n    isEdit: false,\n    idUserToEdit: null\n  })\n\n  const [editedUser, setEditedUser] = useState({\n    id: null,\n    name: '',\n    surname: '',\n    desc: ''\n  })\n\n  useEffect(() => {\n    loadUsers();\n  }, [])\n \n\n  const editUser = (user) => {\n    setEditMode({ ...editMode, isEdit: !editMode.isEdit, idUserToEdit: user.id })\n    setEditedUser({ ...editedUser, id: user.id })\n  }\n\n  return (\n    <>\n    {\n      users.users?\n      <Paginator\n        users={users}\n        editMode={editMode}\n        putUser={putUser}\n        loadUsers={loadUsers}\n        editUser={editUser}\n        deleteUser={deleteUser}\n      />\n      : <p>Loading...</p>\n    }\n    </>\n  )\n}\n\nexport default UsersComponent;\n","import React from 'react';\nimport { store } from './redux/store'\nimport InputForm from './components/InputForm'\nimport { Provider } from 'react-redux'\nimport UsersComponent from './components/UsersComponent'\nimport './app.css'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"app\">\n        <InputForm />\n        <UsersComponent />\n      </div>\n    </Provider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}